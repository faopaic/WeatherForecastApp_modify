【pref.htmlの目的】

このファイル（pref.html）は、日本全国の都道府県ごとの天気・気象予報情報をWebブラウザ上で表示するためのHTMLファイルです。
ユーザーが都道府県を選択すると、その地域の天気予報、気温、降水確率、波・風の情報、注意報・警報、ライブカメラ映像などを分かりやすくで表示します。
気象庁のAPIやYouTubeライブカメラなど外部サービスと連携し、最新の気象情報を動的に取得・表示することが主な役割です。

【主な構成・特徴】

・prefhtmlはHTML＋CSS＋JavaScriptで構成されており、1ファイルで完結したWebページです。
・都道府県ごとに天気・気象情報を6つのグリッド（天気、気温、ライブカメラ、降水確率、波・風、ヒートマップボタン）で分かりやすく表示します。
・気象庁のAPIから天気・気温・降水確率・波・風などの最新データを自動取得し、動的に表示します。
・注意報・警報が発表されている場合は、警報内容に応じたアニメーションGIF背景とともに強調表示します。
・各都道府県のライブカメラ映像（YouTubeや静止画）を埋め込み、リアルタイムの様子も確認できます。
・青森県や三重県など一部の都道府県はAPIや自動更新機能を使い、よりリアルタイム性を高めています。
・レスポンシブデザインにより、PC・スマートフォンどちらでも見やすいレイアウトとなっています。
・「戻る」ボタンや「都道府県ヒートマップへ」ボタンで、他画面への遷移も簡単に行えます。

【使い方・ユーザー体験】

・ユーザーは都道府県を選択してページにアクセスすると、その地域の最新の天気・気象情報が自動で表示されます。
・天気、気温、降水確率、波・風、注意報・警報、ライブカメラなどがグリッド形式で一目で分かるように整理されています。
・注意報や警報が発表されている場合は、画面上部にアニメーション付きで強調表示され、重要な情報を見逃しません。
・ライブカメラ映像で現地の様子をリアルタイムで確認できます（一部地域は自動更新やライブ配信対応）。
・「戻る」ボタンで前の画面に簡単に戻ることができ、「都道府県ヒートマップへ」ボタンで全国の気象状況を地図で確認できます。
・スマートフォンやPCなど、どの端末からでも快適に閲覧できるようデザインされています。

【他ファイルとの関係】

・「style.css」：ページ全体のデザインやレイアウトを担当し、グリッドやボタンなどの見た目を整えています。
・「img」フォルダ：注意報・警報の背景アニメーション（GIF画像）など、視覚的な強調に利用されます。
・「heatmap.html」：都道府県ヒートマップボタンから遷移し、全国の気象状況を地図形式で表示するページです。
・「index.html」：アプリのトップページや都道府県選択画面として機能し、pref.htmlへの導線となります。
・「README.md」：アプリ全体の使い方や構成、セットアップ手順などのドキュメントです。
   これらのファイルと連携することで、pref.htmlは単体ではなく、天気予報アプリ全体の一部として機能します。

【工夫した点・アピールポイント】

・天気や気温、降水確率などの重要な情報をグリッドレイアウトで整理し、直感的に見やすい画面構成にしました。
・天気のテキスト（晴れ・雨・雪など）を色分けし、視覚的に分かりやすくしています。
・注意報・警報が発表された場合は、内容に応じてアニメーションGIF背景を自動で切り替え、緊急性を強調しています。
・各都道府県のライブカメラ映像を埋め込み、現地のリアルタイムな様子も確認できるようにしました。
・青森県や三重県など一部地域はAPIや自動更新機能を使い、よりリアルタイム性を高めています。
・スマートフォンやPCなど様々な端末で快適に閲覧できるよう、レスポンシブデザインを徹底しています。
・「戻る」や「ヒートマップへ」など、ユーザーが迷わず操作できる導線設計を意識しました。
・外部APIの障害時にもエラーメッセージを表示し、ユーザーに状況が伝わるよう配慮しています。

【青森県ライブカメラGoogleAPI取得部分の説明】

この部分のコードは、ユーザーが青森県（prefId === 'aomori'）を選択した際に、
YouTube Data APIを利用して青森県のライブカメラ映像（ライブ配信中の動画）を自動取得・表示する機能です。



【YouTube Data APIおよびGoogle APIの概要・役割・本アプリでの利用目的】

YouTube Data APIは、Googleが提供するWeb APIの一つで、YouTube上の動画・チャンネル・再生リストなどの情報を外部アプリケーションから取得・操作できるサービスです。
Google APIはGoogleが提供する各種サービス（YouTube、Google Maps、Gmailなど）を外部から利用するためのAPI群の総称で、YouTube Data APIもその一部です。

YouTube Data APIを利用することで、アプリケーションはYouTube上のライブ配信動画の検索や、動画情報の取得、チャンネル情報の取得などが可能になります。
APIを利用するにはGoogle Cloud PlatformでAPIキーを発行し、リクエスト時に認証情報として付与する必要があります。

本アプリでは、青森県のライブカメラ映像を自動取得するためにYouTube Data APIを活用しています。
APIを通じて「現在ライブ配信中の動画」を検索し、その動画IDを使ってWebページ上にYouTubeライブ映像を埋め込んでいます。

このように、Google API（YouTube Data API）を利用することで、外部サービスと連携したリアルタイムな情報提供が可能となっています。



主な処理の流れは以下の通りです。

1. YouTube Data APIのAPIキーと、青森県ライブカメラのYouTubeチャンネルID（channelId）を指定し、
    ライブ配信中の動画を検索するAPIリクエストURL（apiUrl）を生成します。（pref.html 538～543行目）

2. fetch関数でapiUrlにアクセスし、YouTubeからライブ配信中の動画情報（JSON形式）を取得します。（pref.html 544行目）

3. 取得したデータ（data.items）が存在し、かつライブ動画が配信中の場合は、その動画ID（videoId）を使ってYouTubeの埋め込みiframeタグを生成し、
    HTML内の「aomori-livecam」要素に挿入します。これにより、ページ上で青森県のライブカメラ映像が自動再生されます。（pref.html 545～553行目）

4. ライブ配信中の動画が存在しない場合は、「現在ライブ配信中の動画がありません」と表示します。（pref.html 550～551行目）

5. API取得に失敗した場合（catch節）は、「ライブカメラ情報の取得に失敗しました」とエラーメッセージを表示します。（pref.html 552～556行目）

この実装により、ユーザーは特別な操作をせずに、青森県の最新ライブカメラ映像をWebページ上で手軽に視聴できるようになっています。API連携によるリアルタイム性と、動的な埋め込み表示が特徴です。



【三重県ライブカメラ自動更新部分の説明】

この部分のコードは、ユーザーが三重県（prefId === 'mie'）を選択した際に、三重県のライブカメラ画像をWebページ上で自動的に最新状態へ更新し続けるための処理です。

【三重県ライブカメラ自動更新処理の流れ】

1. ユーザーが三重県（prefId === 'mie'）を選択した場合のみ、以下の処理が実行されます。（pref.html 553行目以降）

2. updateImgという関数を定義します。この関数は、HTML内のid「mie-livecam-img」を持つimg要素を取得し、
    存在すれば画像URL（base）に現在時刻（Date.now()）をクエリパラメータとして付加してimgのsrc属性に設定します。
    これによりキャッシュを回避し、常に最新画像を取得できます（pref.html 555～561行目）

3. ページ表示時に一度updateImg()を実行し、最新のライブカメラ画像を表示します。（pref.html 562行目）

4. setInterval(updateImg, 3000)によって、3秒ごとに自動的にupdateImg()が呼び出され、img要素の画像が最新のものに更新され続けます。（pref.html 563行目）

この一連の流れにより、三重県のライブカメラ画像がリアルタイムで自動更新され、ユーザーは常に最新の現地映像を確認できます。



【heatmap.htmlの説明】

heatmap.htmlは、日本全国の都道府県ごとの最高気温を色分けして日本地図上に可視化するためのWebページです。

主な特徴・仕組みは以下の通りです。

・各都道府県をリスト（li要素）で日本地図の形に配置し、視覚的に分かりやすいUIを実現しています。
・気象庁のAPI（https://www.jma.go.jp/bosai/forecast/data/forecast/）から各都道府県の天気予報データを取得し、最高気温を抽出します。
・最高気温の値に応じて、都道府県ごとに色分け（赤・オレンジ・黄・青・緑）を行い、気温分布を一目で把握できるようにしています。
・色分けの凡例（35℃以上、30℃以上、25℃以上、20℃以上、20℃未満）も画面上部に表示され、直感的に温度帯が分かります。
・各都道府県をクリックすると、その都道府県の詳細ページ（または該当セクション）に遷移できる設計です。
・地図の描画や色付けはJavaScriptで動的に行われており、最新の気象データに基づいたリアルタイムなヒートマップ表示が可能です。

このように、heatmap.htmlは全国の気温状況を地図上で直感的に比較・把握できるヒートマップ機能を提供しています。

【heatmap.htmlの処理の流れ】

1. ページが読み込まれると、JavaScriptが実行されます。（heatmap.html 99行目以降）

2. 気象庁API（https://www.jma.go.jp/bosai/forecast/data/forecast/）から全国の天気予報データをfetchで取得します。（heatmap.html 123～181行目）

3. 取得したデータから各都道府県の最高気温を抽出します。（heatmap.html 132～170行目）

4. 最高気温の値に応じて、都道府県ごとに色（赤・オレンジ・黄・青・緑）を決定します。（heatmap.html 119～128行目 getTempColor関数）

5. li要素で構成された日本地図の各都道府県に、決定した色を動的に適用します。（heatmap.html 172～179行目）

6. 色分けの凡例（35℃以上、30℃以上、25℃以上、20℃以上、20℃未満）を画面上部に表示します。（heatmap.html 8～28行目）

7. ユーザーが都道府県をクリックすると、その都道府県の詳細ページや該当セクションに遷移します。（heatmap.html 31～97行目）

8. 必要に応じて、データ取得や色分けを一定間隔で自動更新することも可能です（実装による）。

このような流れで、heatmap.htmlはリアルタイムな気温分布ヒートマップを実現しています。
