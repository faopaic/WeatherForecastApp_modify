### 天気予報アプリのプレゼン台本

こんにちは！今日は、私たちが開発した「天気予報アプリ」についてご紹介します。このアプリは、気象庁のWeb APIを活用して、全国の天気予報を簡単に取得できる便利なツールです。


#### 2. アプリの概要

このアプリでは、以下のような流れで天気予報を取得できます：

1. まずコードを実行すると、全国47都道府県のリストが表示されます。
2. ユーザーは、リストから知りたい都道府県に対応する数字を入力します。
3. 入力後、その都道府県の天気データがリアルタイムで取得され、見いやすい形で画面に表示されます。

表示されるデータには、以下の情報が含まれます：
地域、日付、天気、最高気温・最低気温、降水確率、風向き波高


#### 3. 主な機能のデモ
それでは実際にコードを実行して見たいと思います




#### 4. コードの仕組み解説 (詳細版)

##### 1. **全体の流れ**
このアプリは、以下の手順で動作します：
1. ユーザーが都道府県を選択。
2. 選択された都道府県のコードを基に、気象庁のAPIから天気データを取得。
3. 取得したJSONデータを解析し、必要な情報を抽出。
4. 抽出したデータを整形して画面に表示。

##### 2. **主要なクラスとその役割**

- **`WeatherForecastApp` クラス**
  - このクラスはアプリのエントリーポイントであり、ユーザーインターフェースを提供します。
  - 都道府県リストの表示や選択、`WeatherApiClient` クラスの呼び出しを行います。

- **`WeatherApiClient` クラス**
  - このクラスは気象庁のAPIと通信を行います。
  - 指定された都道府県コードを基に天気データを取得し、JSON形式のデータを解析します。

- **`WeatherForecast` クラス**
  - このクラスは天気予報データを格納するためのデータモデルクラスです。
  - 日付、天気、気温、降水確率、風向き、波高などの情報を保持します。

---

#### シーケンス図を用いた解説

次に、シーケンス図を用いてアプリの動作を詳しく解説します。

1. **都道府県リストの表示**
   - アプリが起動すると、`WeatherForecastApp` クラスが都道府県リストをユーザーに表示します。
   - ユーザーはリストから都道府県を選択します。

2. **天気データの取得**
   - ユーザーが都道府県を選択すると、`WeatherForecastApp` クラスは `WeatherApiClient` クラスを呼び出し、選択された都道府県の天気データを取得します。
   - `WeatherApiClient` クラスは気象庁のAPIに接続し、天気データを取得します。

3. **データの解析とモデル生成**
   - 取得したデータは `WeatherApiClient` クラス内で解析され、`WeatherForecast` クラスのオブジェクトが生成されます。
   - このオブジェクトには、日付、天気、気温、降水確率、風向き、波高などの情報が格納されます。

4. **天気予報の表示**
   - 解析されたデータは `WeatherForecastApp` クラスに返され、ユーザーに見やすい形式で表示されます。

このシーケンス図を見ながら、各クラスがどのように連携しているかを理解していただけると思います。








##### 5. **コードの工夫**
- **再利用性の高い設計**
  - `WeatherApiClient` クラスは、APIエンドポイントやデータ解析のロジックを分離しており、他のプロジェクトでも再利用可能です。

- **デフォルト値の設定**
  - `WeatherForecast` クラスでは、旧形式のコンストラクタを用意し、互換性を維持しています。これにより、波高や風向きのデータがない場合でも、アプリが正常に動作します。

- **エラーメッセージの明確化**
  - APIエラーやユーザー入力エラー時に、具体的なエラーメッセージを表示することで、ユーザーが問題を特定しやすくしています。

- **文字幅の調整**
  - 都道府県リストの表示では、全角文字と半角文字の幅を考慮して整列させる工夫がされています。これにより、リストが見やすくなっています。

- **JSONデータの柔軟な解析**
  - JSONデータの解析では、データが欠損している場合でもアプリがクラッシュしないように、`optString` や `optJSONArray` を使用して安全にデータを取得しています。
---



#### 7. Javaのマップを用いた都道府県管理の仕組み

【概要】

- `PREF_CODE_MAP` は、都道府県名と対応するコードを管理するための仕組みです。
- 都道府県名をキー、対応する気象庁APIのコードを値として保存しています。

【特徴】

1. **順序を保つ**:
   - 都道府県が登録された順番をそのまま保持します。
   - リスト表示時に自然な順序で出力されます。

2. **素早い検索**:
   - 都道府県名を使って、対応するコードをすぐに見つけられます。

【仕組み】

1. **マップの作成**:
   ```java
   private static final Map<String, String> PREF_CODE_MAP = new LinkedHashMap<>();
   static {
       PREF_CODE_MAP.put("北海道", "016000");
       PREF_CODE_MAP.put("青森県", "020000");
       // ...以下略...
       PREF_CODE_MAP.put("沖縄県", "471000");
   }
   ```
   - 都道府県名とコードをペアで登録します。

2. **リストの生成**:
   ```java
   String[] prefNames = PREF_CODE_MAP.keySet().toArray(new String[0]);
   ```
   - 都道府県名を配列に変換して、リスト表示に使います。

3. **コードの取得**:
   ```java
   String selectedPref = prefNames[selected - 1];
   String prefCode = PREF_CODE_MAP.get(selectedPref);
   System.out.println("選択された都道府県: " + selectedPref + " (コード: " + prefCode + ")");
   ```
   - ユーザーが選んだ都道府県名から、対応するコードを取得します。

【利点】

- **簡単に管理できる**:
  - 都道府県名やコードを追加・変更するのが簡単です。
- **拡張性が高い**:
  - 新しい都道府県やコードをすぐに追加できます。
---

#### 8. まとめ (約1分)

以上が「天気予報アプリ」の紹介です。このアプリを使えば、日々の生活に役立つ天気情報を簡単に手に入れることができます。ぜひお試しください！

ご清聴ありがとうございました。